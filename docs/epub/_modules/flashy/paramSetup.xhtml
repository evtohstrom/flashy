<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>flashy.paramSetup</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <h1>Source code for flashy.paramSetup</h1><div class="highlight"><pre>
<span></span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">from</span> <span class="nn">.IOutils</span> <span class="k">import</span> <span class="n">cl</span><span class="p">,</span> <span class="n">np</span><span class="p">,</span> <span class="n">fortParse</span><span class="p">,</span> <span class="n">os</span><span class="p">,</span> <span class="n">_cdxfolder</span><span class="p">,</span> <span class="n">getTITANtime</span><span class="p">,</span> <span class="n">writePBSscript</span>
<span class="n">_FLASHdefaults</span> <span class="o">=</span> <span class="s1">&#39;setup_params&#39;</span>
<span class="n">pd</span><span class="o">.</span><span class="n">set_option</span><span class="p">(</span><span class="s1">&#39;display.max_colwidth&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<div class="viewcode-block" id="parGroup"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.parGroup">[docs]</a><span class="k">class</span> <span class="nc">parGroup</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__setattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">att</span><span class="p">,</span> <span class="n">val</span><span class="p">):</span>
        <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">att</span><span class="p">):</span>
            <span class="n">comp</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">att</span><span class="p">)</span>
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">comp</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>  <span class="c1"># here were at a defaults obj (values are dicts)</span>
                <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>  <span class="c1"># init/overwriting a value</span>
                    <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__setattr__</span><span class="p">(</span><span class="n">att</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>  <span class="c1"># setting the value field</span>
                    <span class="n">comp</span><span class="p">[</span><span class="s1">&#39;value&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">val</span>
                    <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__setattr__</span><span class="p">(</span><span class="n">att</span><span class="p">,</span> <span class="n">comp</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>  <span class="c1"># this is a param obj (only keys and values)</span>
                <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__setattr__</span><span class="p">(</span><span class="n">att</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>  <span class="c1"># new att, initialize</span>
            <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__setattr__</span><span class="p">(</span><span class="n">att</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dictionary</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">dictionary</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
            <span class="nb">setattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
    
<div class="viewcode-block" id="parGroup.update"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.parGroup.update">[docs]</a>    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dictionary</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">dictionary</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
            <span class="nb">setattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span></div>
            
<div class="viewcode-block" id="parGroup.items"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.parGroup.items">[docs]</a>    <span class="k">def</span> <span class="nf">items</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">keys</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="vm">__dict__</span>
        <span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="nb">getattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">att</span><span class="p">)</span> <span class="k">for</span> <span class="n">att</span> <span class="ow">in</span> <span class="n">keys</span><span class="p">]</span>
        <span class="k">return</span> <span class="nb">zip</span><span class="p">(</span><span class="n">keys</span><span class="p">,</span> <span class="n">values</span><span class="p">)</span></div></div>


<div class="viewcode-block" id="parameterGroup"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.parameterGroup">[docs]</a><span class="k">class</span> <span class="nc">parameterGroup</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parfile</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;fillcode is a workaround to avoid creating empty parGroups.&quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">meta</span> <span class="o">=</span> <span class="n">getMeta</span><span class="p">(</span><span class="n">parfile</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]:</span>
            <span class="n">dc</span> <span class="o">=</span> <span class="n">makeParDict</span><span class="p">(</span><span class="n">parfile</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">params</span> <span class="o">=</span> <span class="n">parGroup</span><span class="p">(</span><span class="n">dc</span><span class="p">)</span>
        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
            <span class="n">dc</span> <span class="o">=</span> <span class="n">readSetupParams</span><span class="p">(</span><span class="n">parfile</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">defaults</span> <span class="o">=</span> <span class="n">parGroup</span><span class="p">(</span><span class="n">dc</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">dc</span> <span class="o">=</span> <span class="n">makeParDict</span><span class="p">(</span><span class="n">parfile</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">params</span> <span class="o">=</span> <span class="n">parGroup</span><span class="p">(</span><span class="n">dc</span><span class="p">)</span>
            <span class="n">dc</span> <span class="o">=</span> <span class="n">readSetupParams</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;cdxpath&#39;</span><span class="p">],</span> <span class="n">_FLASHdefaults</span><span class="p">))</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">defaults</span> <span class="o">=</span> <span class="n">parGroup</span><span class="p">(</span><span class="n">dc</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">mergeValues</span><span class="p">()</span>

<div class="viewcode-block" id="parameterGroup.setPars"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.parameterGroup.setPars">[docs]</a>    <span class="k">def</span> <span class="nf">setPars</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parfile</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;sets the parameters from a file in the object.&quot;&quot;&quot;</span>
        <span class="n">newmeta</span> <span class="o">=</span> <span class="n">getMeta</span><span class="p">(</span><span class="n">parfile</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">newmeta</span><span class="p">[</span><span class="s1">&#39;default&#39;</span><span class="p">]:</span>  <span class="c1"># add or update defaults</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">defaults</span> <span class="o">=</span> <span class="n">readSetupParams</span><span class="p">(</span><span class="n">parfile</span><span class="p">)</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">meta</span> <span class="o">=</span> <span class="n">newmeta</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">defaults</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">readSetupParams</span><span class="p">(</span><span class="n">parfile</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>  <span class="c1"># overwrite params (safer)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">params</span> <span class="o">=</span> <span class="n">parGroup</span><span class="p">(</span><span class="n">makeParDict</span><span class="p">(</span><span class="n">parfile</span><span class="p">))</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">mergeValues</span><span class="p">()</span></div>
    
<div class="viewcode-block" id="parameterGroup.mergeValues"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.parameterGroup.mergeValues">[docs]</a>    <span class="k">def</span> <span class="nf">mergeValues</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;adds parameter values to the defaults dictionary.&quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">defaults</span> <span class="ow">or</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">params</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;flashy.parameterGroup: Params-Defaults pair not found. Returning.&#39;</span><span class="p">)</span>
            <span class="k">return</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">params</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
                <span class="nb">setattr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">defaults</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">fortParse</span><span class="p">(</span><span class="n">v</span><span class="p">))</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span></div>
    
<div class="viewcode-block" id="parameterGroup.tabulate"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.parameterGroup.tabulate">[docs]</a>    <span class="k">def</span> <span class="nf">tabulate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">allpars</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]:</span>  <span class="c1"># return params</span>
            <span class="n">A</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">params</span><span class="o">.</span><span class="n">items</span><span class="p">()),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Parameter&#39;</span><span class="p">,</span> <span class="s1">&#39;Value&#39;</span><span class="p">])</span>
            <span class="k">return</span> <span class="n">A</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s1">&#39;Parameter&#39;</span><span class="p">)</span>
        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span> <span class="ow">or</span> <span class="n">allpars</span><span class="p">:</span>  <span class="c1"># return defaults</span>
            <span class="n">A</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">defaults</span><span class="o">.</span><span class="n">items</span><span class="p">()))</span>
        <span class="k">else</span><span class="p">:</span>  <span class="c1"># return &#39;docked&#39; params</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">docked</span> <span class="o">=</span> <span class="p">[</span><span class="n">z</span> <span class="k">for</span> <span class="n">z</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">defaults</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">z</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;value&#39;</span><span class="p">]))</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">]</span>
            <span class="k">except</span> <span class="ne">TypeError</span><span class="p">:</span>
                <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;parGroup.tabulate.error: string index error in docked.&#39;</span>\
                      <span class="s1">&#39; flash.par includes unknown params to simulation.&#39;</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">()</span>
            <span class="n">A</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">docked</span><span class="p">))</span>
        <span class="n">A</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">transpose</span><span class="p">()</span>
        <span class="n">A</span><span class="o">.</span><span class="n">index</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Parameter&#39;</span>
        <span class="k">if</span> <span class="s1">&#39;comment&#39;</span> <span class="ow">in</span> <span class="n">A</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">A</span><span class="p">[[</span><span class="s1">&#39;value&#39;</span><span class="p">,</span> <span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="s1">&#39;family&#39;</span><span class="p">,</span> <span class="s1">&#39;comment&#39;</span><span class="p">]]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">A</span></div>

<div class="viewcode-block" id="parameterGroup.getStyledTable"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.parameterGroup.getStyledTable">[docs]</a>    <span class="k">def</span> <span class="nf">getStyledTable</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">stylerprops</span><span class="o">=</span><span class="p">{},</span> <span class="n">tableprops</span><span class="o">=</span><span class="p">{}):</span>
        <span class="c1">#if not stylerprops:</span>
        <span class="c1">#    stylerprops = {&#39;background-color&#39;:&#39;#111111&#39;, &#39;color&#39;: &#39;#dbe1ea&#39;}</span>
        <span class="c1">#if not tableprops:</span>
        <span class="c1">#    tableprops = {&#39;selector&#39;:&quot;tr:hover&quot;, &#39;props&#39;:[(&quot;background-color&quot;, &#39;#6f5757&#39;)]}</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;No defaults found, returning params only&#39;</span><span class="p">)</span>
            <span class="n">A</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">tabulate</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">pd</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="n">formats</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">Styler</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;No set values, returning defaults&#39;</span><span class="p">)</span>
            <span class="n">A</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">tabulate</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">pd</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="n">formats</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">Styler</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">A</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">tabulate</span><span class="p">(</span><span class="n">allpars</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
            <span class="n">S</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="n">formats</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">Styler</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
            <span class="c1">#S.set_properties(**stylerprops)</span>
            <span class="c1">#S.set_table_styles([tableprops])</span>
            <span class="n">redind</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">index</span><span class="p">[</span><span class="n">A</span><span class="p">[</span><span class="s1">&#39;value&#39;</span><span class="p">]</span><span class="o">!=</span><span class="n">A</span><span class="p">[</span><span class="s1">&#39;default&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
            <span class="n">S</span><span class="o">.</span><span class="n">applymap</span><span class="p">(</span><span class="n">stylerTest</span><span class="p">,</span> <span class="n">subset</span><span class="o">=</span><span class="n">pd</span><span class="o">.</span><span class="n">IndexSlice</span><span class="p">[</span><span class="n">redind</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;value&#39;</span><span class="p">]])</span>
            <span class="k">return</span> <span class="n">S</span></div>

<div class="viewcode-block" id="parameterGroup.writeParfile"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.parameterGroup.writeParfile">[docs]</a>    <span class="k">def</span> <span class="nf">writeParfile</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">outfile</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">terse</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">outfile</span><span class="p">:</span>
            <span class="n">outpath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">outfile</span><span class="p">)</span>
            <span class="nb">print</span><span class="p">(</span><span class="n">outpath</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">docked</span> <span class="o">=</span> <span class="p">[</span><span class="n">z</span> <span class="k">for</span> <span class="n">z</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">defaults</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">z</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;value&#39;</span><span class="p">]))</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">]</span>
                <span class="n">writeDictionary</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">docked</span><span class="p">),</span> <span class="n">outpath</span><span class="p">,</span> <span class="n">meta</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">terse</span><span class="o">=</span><span class="n">terse</span><span class="p">)</span>
            <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Failed to write documentation, writing params only.&#39;</span><span class="p">)</span>
                <span class="n">writeDictionary</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">params</span><span class="o">.</span><span class="n">items</span><span class="p">()),</span> <span class="n">outpath</span><span class="p">,</span> <span class="n">meta</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Wrote: </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">outpath</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>  <span class="c1"># default is to assume &#39;docked&#39; params and write to runfolder/otp</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">vuvuzela</span><span class="p">()</span>
            <span class="n">docked</span> <span class="o">=</span> <span class="p">[</span><span class="n">z</span> <span class="k">for</span> <span class="n">z</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">defaults</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">z</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;value&#39;</span><span class="p">]))</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">cdx</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;cdxpath&#39;</span><span class="p">]</span>
            <span class="n">cpname</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">cdx</span><span class="p">,</span> <span class="s1">&#39;flash.par&#39;</span><span class="p">)</span>
            <span class="n">writeDictionary</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">docked</span><span class="p">),</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">cpname</span><span class="p">),</span> <span class="n">meta</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">terse</span><span class="o">=</span><span class="n">terse</span><span class="p">)</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Wrote: </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">cpname</span><span class="p">))</span>
            <span class="n">otpf</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">defaults</span><span class="o">.</span><span class="n">output_directory</span><span class="p">[</span><span class="s1">&#39;value&#39;</span><span class="p">]</span>
            <span class="n">outpath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">cdx</span><span class="p">,</span> <span class="n">otpf</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">outpath</span><span class="p">):</span>
                <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">outpath</span><span class="p">)</span>
            <span class="n">cpname</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">outpath</span><span class="p">,</span> <span class="s1">&#39;flash.par&#39;</span><span class="p">)</span>
            <span class="n">writeDictionary</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">docked</span><span class="p">),</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">cpname</span><span class="p">),</span> <span class="n">meta</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">terse</span><span class="o">=</span><span class="n">terse</span><span class="p">)</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Wrote: </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">cpname</span><span class="p">))</span></div>

<div class="viewcode-block" id="parameterGroup.readChanges"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.parameterGroup.readChanges">[docs]</a>    <span class="k">def</span> <span class="nf">readChanges</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">df</span><span class="p">):</span>
        <span class="c1"># turn df to a simple dictionary</span>
        <span class="k">if</span> <span class="s1">&#39;comment&#39;</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
            <span class="n">pars</span><span class="p">,</span> <span class="n">values</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">index</span><span class="p">),</span> <span class="nb">list</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;value&#39;</span><span class="p">])</span>
            <span class="n">newpdict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">pars</span><span class="p">,</span> <span class="n">values</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">newpdict</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">T</span><span class="o">.</span><span class="n">to_dict</span><span class="p">(</span><span class="s2">&quot;records&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="c1"># parse values to avoid &#39;int&#39;</span>
        <span class="n">parsedv</span> <span class="o">=</span> <span class="p">[</span><span class="n">fortParse</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">dec</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">newpdict</span><span class="o">.</span><span class="n">values</span><span class="p">()]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">params</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">newpdict</span><span class="o">.</span><span class="n">keys</span><span class="p">(),</span> <span class="n">parsedv</span><span class="p">)))</span>
        <span class="c1"># refresh docked values and remove empty value parameters for when retabulating.</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">mergeValues</span><span class="p">()</span></div>
        
<div class="viewcode-block" id="parameterGroup.vuvuzela"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.parameterGroup.vuvuzela">[docs]</a>    <span class="k">def</span> <span class="nf">vuvuzela</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Sound the horn of ERROR.&quot;&quot;&quot;</span>
        <span class="n">dkeys</span> <span class="o">=</span> <span class="p">[</span><span class="n">z</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">z</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">defaults</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">z</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;value&#39;</span><span class="p">]))</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">geom</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">defaults</span><span class="o">.</span><span class="n">geometry</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;geometry&#39;</span><span class="p">]</span><span class="o">!=</span><span class="n">geom</span><span class="p">[</span><span class="s1">&#39;value&#39;</span><span class="p">]:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;BZZZZZZZZZZZZ: GEOMETRY DOESN&#39;T MATCH: &quot;</span>\
                  <span class="s2">&quot;setup:</span><span class="si">{}</span><span class="s2"> parfile:</span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;geometry&#39;</span><span class="p">],</span> <span class="n">geom</span><span class="p">[</span><span class="s1">&#39;value&#39;</span><span class="p">]))</span>
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">getEssential</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;dimension&#39;</span><span class="p">]):</span>
            <span class="k">if</span> <span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">dkeys</span><span class="p">:</span>
                <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;BZZZZZZZZZZZZ: </span><span class="si">{}</span><span class="s2"> NOT SET!&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">k</span><span class="p">))</span></div>

<div class="viewcode-block" id="parameterGroup.readMeta"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.parameterGroup.readMeta">[docs]</a>    <span class="k">def</span> <span class="nf">readMeta</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;returns dimension, cells per block, and maxblocks from a &#39;docked&#39; parfile&quot;&quot;&quot;</span>
        <span class="n">dim</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;dimension&#39;</span><span class="p">])</span>
        <span class="n">cells</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;cells&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">)</span>
        <span class="n">cells</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;cells&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
        <span class="n">cells</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">cells</span><span class="p">))</span>
        <span class="n">maxblocks</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;maxblocks&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;maxb&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">dim</span><span class="p">,</span> <span class="n">cells</span><span class="p">,</span> <span class="n">maxblocks</span></div>

<div class="viewcode-block" id="parameterGroup.readEssential"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.parameterGroup.readEssential">[docs]</a>    <span class="k">def</span> <span class="nf">readEssential</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;returns nblocks, minima, and maxima from a &#39;docked&#39; parfile&quot;&quot;&quot;</span>
        <span class="n">dim</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;dimension&#39;</span><span class="p">])</span>
        <span class="n">keys</span> <span class="o">=</span> <span class="n">getEssential</span><span class="p">(</span><span class="n">dim</span><span class="p">)</span>
        <span class="n">step</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">keys</span><span class="p">)</span><span class="o">/</span><span class="n">dim</span><span class="p">)</span>
        <span class="n">nblocks</span> <span class="o">=</span> <span class="p">[</span><span class="nb">getattr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">defaults</span><span class="p">,</span> <span class="n">k</span><span class="p">)[</span><span class="s1">&#39;value&#39;</span><span class="p">]</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">::</span><span class="n">step</span><span class="p">]]</span>
        <span class="n">mins</span> <span class="o">=</span> <span class="p">[</span><span class="nb">getattr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">defaults</span><span class="p">,</span> <span class="n">k</span><span class="p">)[</span><span class="s1">&#39;value&#39;</span><span class="p">]</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">keys</span><span class="p">[</span><span class="mi">1</span><span class="p">::</span><span class="n">step</span><span class="p">]]</span>
        <span class="n">maxs</span> <span class="o">=</span> <span class="p">[</span><span class="nb">getattr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">defaults</span><span class="p">,</span> <span class="n">k</span><span class="p">)[</span><span class="s1">&#39;value&#39;</span><span class="p">]</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">keys</span><span class="p">[</span><span class="mi">2</span><span class="p">::</span><span class="n">step</span><span class="p">]]</span>
        <span class="k">return</span> <span class="p">[</span><span class="nb">float</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">nblocks</span><span class="p">],</span> <span class="p">[</span><span class="nb">float</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">mins</span><span class="p">],</span> <span class="p">[</span><span class="nb">float</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">maxs</span><span class="p">]</span></div>
    
<div class="viewcode-block" id="parameterGroup.probeSimulation"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.parameterGroup.probeSimulation">[docs]</a>    <span class="k">def</span> <span class="nf">probeSimulation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">frac</span><span class="o">=</span><span class="mf">0.4</span><span class="p">):</span>
        <span class="n">dim</span><span class="p">,</span> <span class="n">cells</span><span class="p">,</span> <span class="n">maxbl</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">readMeta</span><span class="p">()</span>
        <span class="n">nblocks</span><span class="p">,</span> <span class="n">mins</span><span class="p">,</span> <span class="n">maxs</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">readEssential</span><span class="p">()</span>
        <span class="n">area</span><span class="p">,</span> <span class="n">tblcks</span><span class="p">,</span> <span class="n">tcells</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span>
        <span class="n">rmax</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">defaults</span><span class="o">.</span><span class="n">lrefine_max</span><span class="p">[</span><span class="s1">&#39;value&#39;</span><span class="p">])</span>
        <span class="n">sotp</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">dim</span><span class="p">):</span>
            <span class="n">dname</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span><span class="s1">&#39;z&#39;</span><span class="p">}[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">span</span> <span class="o">=</span> <span class="n">maxs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="n">mins</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">limblcks</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">power</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">rmax</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">*</span><span class="nb">float</span><span class="p">(</span><span class="n">nblocks</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="n">limcells</span> <span class="o">=</span> <span class="n">limblcks</span><span class="o">*</span><span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="c1">#minspan = span/limcells</span>
            <span class="n">sotp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{}</span><span class="s1"> span: </span><span class="si">{:2.4E}</span><span class="s1">, resolution: </span><span class="si">{:2.4E}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">dname</span><span class="p">,</span> <span class="n">span</span><span class="p">,</span> <span class="n">span</span><span class="o">/</span><span class="n">limcells</span><span class="p">))</span>
            <span class="n">area</span><span class="o">*=</span><span class="n">span</span>
            <span class="n">tblcks</span><span class="o">*=</span><span class="n">limblcks</span>
            <span class="n">tcells</span><span class="o">*=</span><span class="n">limcells</span>
            <span class="c1"># print(limblcks, limcells)</span>
        
        <span class="c1"># mult(spans)/mult(nblocks)/mult(cells)/2^(ref-1)/2^(ref-1) = area of cell</span>
        <span class="c1"># ref 1 is nblocks, therefore ref-1</span>
        <span class="n">maxPEs</span> <span class="o">=</span> <span class="n">tblcks</span><span class="o">/</span><span class="n">maxbl</span>
        <span class="n">sotp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;Max Refinement: </span><span class="si">{:0.0f}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">rmax</span><span class="p">))</span>
        <span class="n">sotp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;Resolution: </span><span class="si">{:E}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">area</span><span class="o">/</span><span class="n">tcells</span><span class="p">)))</span>
        <span class="n">sotp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;Maximum cells: </span><span class="si">{:E}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">tcells</span><span class="p">))</span>
        <span class="n">sotp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;Maximum Blocks: </span><span class="si">{:E}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">tblcks</span><span class="p">))</span>
        <span class="n">sotp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;Max Blocks per PE: </span><span class="si">{:0.0f}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">maxbl</span><span class="p">))</span>
        <span class="n">sotp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;Maximum PEs: </span><span class="si">{:0.0f}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">maxPEs</span><span class="p">))</span>
        <span class="n">sotp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;Optimistic alloc (</span><span class="si">{:.0%}</span><span class="s1">): </span><span class="si">{:0.2f}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">frac</span><span class="p">,</span> <span class="n">maxPEs</span><span class="o">*</span><span class="n">frac</span><span class="p">))</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">sotp</span><span class="p">))</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">maxPEs</span><span class="o">*</span><span class="n">frac</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span></div>
    
<div class="viewcode-block" id="parameterGroup.writeSubmit"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.parameterGroup.writeSubmit">[docs]</a>    <span class="k">def</span> <span class="nf">writeSubmit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">submitpath</span><span class="p">,</span> <span class="n">recommended</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">frac</span><span class="o">=</span><span class="mf">0.4</span><span class="p">,</span> <span class="n">j1</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
                    <span class="n">time</span><span class="o">=</span><span class="s1">&#39;02:00:00&#39;</span><span class="p">,</span> <span class="n">nodes</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span> <span class="n">ompth</span><span class="o">=</span><span class="mi">16</span><span class="p">):</span>
        <span class="n">qsubfold</span><span class="p">,</span> <span class="n">qsubname</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">submitpath</span><span class="p">)</span>
        <span class="n">runf</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;cdxpath&#39;</span><span class="p">])</span>
        <span class="n">code</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">code</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;export QSUBFOLD=</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">qsubfold</span><span class="p">)))</span>
        <span class="n">code</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;export QSUBNAME=</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">qsubname</span><span class="p">))</span>
        <span class="n">code</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;cd </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">runf</span><span class="p">))</span>
        <span class="n">code</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;bash iterator </span><span class="si">{}</span><span class="s1"> flash.par&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">defaults</span><span class="o">.</span><span class="n">output_directory</span><span class="p">[</span><span class="s1">&#39;value&#39;</span><span class="p">]))</span>
        <span class="n">code</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;wait&#39;</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">recommended</span><span class="p">:</span>
            <span class="n">nodes</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">probeSimulation</span><span class="p">(</span><span class="n">frac</span><span class="p">)</span>
            <span class="n">time</span> <span class="o">=</span> <span class="n">getTITANtime</span><span class="p">(</span><span class="n">nodes</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">j1</span><span class="p">:</span>
            <span class="n">nodes</span><span class="o">*=</span><span class="mi">2</span>
            <span class="n">ompth</span> <span class="o">=</span> <span class="mi">8</span>
            <span class="n">code</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;aprun -n</span><span class="si">{}</span><span class="s1"> -d</span><span class="si">{}</span><span class="s1"> -j1 ./flash4 &amp;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">nodes</span><span class="p">,</span> <span class="n">ompth</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">code</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;aprun -n</span><span class="si">{}</span><span class="s1"> -d</span><span class="si">{}</span><span class="s1"> ./flash4 &amp;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">nodes</span><span class="p">,</span> <span class="n">ompth</span><span class="p">))</span>
        <span class="n">code</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;wait&#39;</span><span class="p">)</span>
        <span class="n">code</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;cd $QSUBFOLD&#39;</span><span class="p">)</span>
        <span class="n">code</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;qsub $QSUBNAME&#39;</span><span class="p">)</span>
        <span class="n">writePBSscript</span><span class="p">(</span><span class="n">submitpath</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="n">time</span><span class="o">=</span><span class="n">time</span><span class="p">,</span> <span class="n">nodes</span><span class="o">=</span><span class="n">nodes</span><span class="p">,</span> <span class="n">ompth</span><span class="o">=</span><span class="n">ompth</span><span class="p">,</span>
                       <span class="n">proj</span><span class="o">=</span><span class="s1">&#39;csc198&#39;</span><span class="p">,</span> <span class="n">mail</span><span class="o">=</span><span class="s1">&#39;rivas.aguilera@gmail.com&#39;</span><span class="p">,</span><span class="n">abe</span><span class="o">=</span><span class="s1">&#39;a&#39;</span><span class="p">)</span></div></div>


<div class="viewcode-block" id="stylerTest"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.stylerTest">[docs]</a><span class="k">def</span> <span class="nf">stylerTest</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;stub to change colors in selected cells.&quot;&quot;&quot;</span>
    <span class="k">return</span> <span class="s1">&#39;color: #ec971f&#39;</span></div>


<div class="viewcode-block" id="getMeta"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.getMeta">[docs]</a><span class="k">def</span> <span class="nf">getMeta</span><span class="p">(</span><span class="n">filepath</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Infer required properties of the run from runfolder name </span>
<span class="sd">    created by flashy.setupFLASH.</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">path</span><span class="p">,</span> <span class="n">file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
    <span class="c1"># path is either ../runcode/cdx or ../runcode/otp_***</span>
    <span class="n">runpath</span><span class="p">,</span> <span class="n">fldr</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="n">_</span><span class="p">,</span> <span class="n">runname</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">runpath</span><span class="p">)</span>
    <span class="n">meta</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">meta</span><span class="p">[</span><span class="s1">&#39;cdxpath&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">runpath</span><span class="p">,</span> <span class="n">_cdxfolder</span><span class="p">)</span>
    <span class="n">deffile</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;cdxpath&#39;</span><span class="p">],</span> <span class="n">_FLASHdefaults</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">file</span><span class="o">==</span><span class="n">_FLASHdefaults</span><span class="p">:</span>
        <span class="n">meta</span><span class="p">[</span><span class="s1">&#39;default&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">meta</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1"># read only defaults</span>
    <span class="k">elif</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isfile</span><span class="p">(</span><span class="n">deffile</span><span class="p">):</span>
        <span class="n">meta</span><span class="p">[</span><span class="s1">&#39;default&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">meta</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>  <span class="c1"># read both params and defaults</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">meta</span><span class="p">[</span><span class="s1">&#39;default&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">meta</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># read only params</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">net</span><span class="p">,</span> <span class="n">geom</span><span class="p">,</span> <span class="n">cells</span><span class="p">,</span> <span class="n">maxblocks</span> <span class="o">=</span> <span class="n">runname</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">meta</span>
    <span class="n">dimension</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">cells</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">))</span>
    <span class="n">keys</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;network&#39;</span><span class="p">,</span> <span class="s1">&#39;geometry&#39;</span><span class="p">,</span> <span class="s1">&#39;cells&#39;</span><span class="p">,</span> <span class="s1">&#39;maxblocks&#39;</span><span class="p">,</span> <span class="s1">&#39;dimension&#39;</span><span class="p">]</span>
    <span class="n">newkeys</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">keys</span><span class="p">,</span> <span class="p">[</span><span class="n">net</span><span class="p">,</span> <span class="n">geom</span><span class="p">,</span> <span class="n">cells</span><span class="p">,</span> <span class="n">maxblocks</span><span class="p">,</span> <span class="n">dimension</span><span class="p">]))</span>
    <span class="n">meta</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">newkeys</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">meta</span></div>


<div class="viewcode-block" id="readSetupParams"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.readSetupParams">[docs]</a><span class="k">def</span> <span class="nf">readSetupParams</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="n">pardict</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">setp</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">comment</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="p">()):</span>
            <span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;        &#39;</span><span class="p">):</span>
                <span class="n">comment</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
            <span class="k">elif</span> <span class="ow">not</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">((</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)):</span>
                <span class="n">fam</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1"> &#39;</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">pardict</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
                    <span class="n">pardict</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="s1">&#39;family&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">fam</span>
                <span class="n">setp</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">pardict</span><span class="p">)</span>
                <span class="n">pardict</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="k">elif</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;    &#39;</span><span class="p">):</span>
                <span class="n">par</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
                <span class="n">pardict</span><span class="p">[</span><span class="n">par</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="n">pardict</span><span class="p">[</span><span class="n">par</span><span class="p">][</span><span class="s1">&#39;value&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
                <span class="n">defa</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;[&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39; ]&#39;</span><span class="p">)</span>
                <span class="n">pardict</span><span class="p">[</span><span class="n">par</span><span class="p">][</span><span class="s1">&#39;default&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">fortParse</span><span class="p">(</span><span class="n">defa</span><span class="p">)</span>
                <span class="n">pardict</span><span class="p">[</span><span class="n">par</span><span class="p">][</span><span class="s1">&#39;comment&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">reversed</span><span class="p">(</span><span class="n">comment</span><span class="p">))</span>
                <span class="n">comment</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">except</span> <span class="ne">FileNotFoundError</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;paramSetup.readSetupParams: Defaults file not found, returning empty dict.&#39;</span><span class="p">)</span>
        <span class="k">pass</span>  <span class="c1"># return an empty dictionary</span>
    <span class="k">return</span> <span class="n">setp</span></div>


<div class="viewcode-block" id="makeParDict"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.makeParDict">[docs]</a><span class="k">def</span> <span class="nf">makeParDict</span><span class="p">(</span><span class="n">parfile</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot; get a dictionary of parameters from a flash.par file&quot;&quot;&quot;</span>
    <span class="n">pars</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">parfile</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">par</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">par</span><span class="p">:</span>
            <span class="n">l</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">elif</span> <span class="s1">&#39;=&#39;</span> <span class="ow">in</span> <span class="n">l</span><span class="p">:</span>
                <span class="n">lsplit</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;=&#39;</span><span class="p">)</span>
                <span class="c1"># get name of parameter (left of &#39;=&#39;)</span>
                <span class="n">p</span> <span class="o">=</span> <span class="n">lsplit</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
                <span class="c1"># remove comment from value (right of &#39;=&#39;)</span>
                <span class="n">v</span> <span class="o">=</span> <span class="n">lsplit</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
                <span class="n">pars</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">p</span><span class="p">,</span><span class="n">v</span><span class="p">))</span>
    <span class="k">return</span> <span class="nb">dict</span><span class="p">(</span><span class="n">pars</span><span class="p">)</span></div>


<div class="viewcode-block" id="getEssential"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.getEssential">[docs]</a><span class="k">def</span> <span class="nf">getEssential</span><span class="p">(</span><span class="n">dim</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Returns parsed names for essential parameters in a simulation.</span>
<span class="sd">    Bleeding edge of inference here, careful with changing order of </span>
<span class="sd">    variables...</span>
<span class="sd">    </span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">dnames</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:[</span><span class="s1">&#39;x&#39;</span><span class="p">],</span> <span class="mi">2</span><span class="p">:[</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">],</span> <span class="mi">3</span><span class="p">:[</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;z&#39;</span><span class="p">]}[</span><span class="n">dim</span><span class="p">]</span>
    <span class="n">keys</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">dn</span> <span class="ow">in</span> <span class="n">dnames</span><span class="p">:</span>        
        <span class="n">line</span> <span class="o">=</span> <span class="s1">&#39;nblock</span><span class="si">{0}</span><span class="s1">,</span><span class="si">{0}</span><span class="s1">min,</span><span class="si">{0}</span><span class="s1">max,&#39;</span>\
               <span class="s1">&#39;</span><span class="si">{0}</span><span class="s1">l_boundary_type,</span><span class="si">{0}</span><span class="s1">r_boundary_type&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">dn</span><span class="p">)</span>
        <span class="n">keys</span> <span class="o">+=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">keys</span></div>


<div class="viewcode-block" id="getListedDefs"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.getListedDefs">[docs]</a><span class="k">def</span> <span class="nf">getListedDefs</span><span class="p">(</span><span class="n">supradict</span><span class="p">):</span>
    <span class="n">pars</span><span class="p">,</span> <span class="n">vals</span><span class="p">,</span> <span class="n">defs</span><span class="p">,</span> <span class="n">docs</span><span class="p">,</span> <span class="n">fams</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">par</span> <span class="ow">in</span> <span class="n">supradict</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
        <span class="n">pars</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">par</span><span class="p">)</span>
        <span class="n">docs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">supradict</span><span class="p">[</span><span class="n">par</span><span class="p">][</span><span class="s1">&#39;comment&#39;</span><span class="p">])</span>
        <span class="n">vals</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">supradict</span><span class="p">[</span><span class="n">par</span><span class="p">][</span><span class="s1">&#39;value&#39;</span><span class="p">])</span>
        <span class="n">defs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">supradict</span><span class="p">[</span><span class="n">par</span><span class="p">][</span><span class="s1">&#39;default&#39;</span><span class="p">])</span>
        <span class="n">fams</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">supradict</span><span class="p">[</span><span class="n">par</span><span class="p">][</span><span class="s1">&#39;family&#39;</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">pars</span><span class="p">,</span> <span class="n">vals</span><span class="p">,</span> <span class="n">defs</span><span class="p">,</span> <span class="n">docs</span><span class="p">,</span> <span class="n">fams</span></div>


<div class="viewcode-block" id="writeDictionary"><a class="viewcode-back" href="../../flashy.xhtml#flashy.paramSetup.writeDictionary">[docs]</a><span class="k">def</span> <span class="nf">writeDictionary</span><span class="p">(</span><span class="n">indict</span><span class="p">,</span> <span class="n">outfile</span><span class="p">,</span> <span class="n">meta</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">terse</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">meta</span><span class="p">:</span>
        <span class="n">ps</span><span class="p">,</span> <span class="n">vs</span><span class="p">,</span> <span class="n">ds</span><span class="p">,</span> <span class="n">dcs</span><span class="p">,</span> <span class="n">fms</span> <span class="o">=</span> <span class="n">getListedDefs</span><span class="p">(</span><span class="n">indict</span><span class="p">)</span>
        <span class="n">dat</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">ps</span><span class="p">,</span><span class="n">vs</span><span class="p">,</span><span class="n">ds</span><span class="p">,</span><span class="n">dcs</span><span class="p">,</span><span class="n">fms</span><span class="p">))</span>
        <span class="nb">sorted</span><span class="p">(</span><span class="n">dat</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>
        <span class="n">groups</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">fms</span><span class="p">))</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">outfile</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">o</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">g</span> <span class="ow">in</span> <span class="n">groups</span><span class="p">:</span>
                <span class="n">o</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">##### </span><span class="si">{}</span><span class="s2"> #####</span><span class="se">\n\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">g</span><span class="p">))</span>
                <span class="n">vals</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">dat</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">==</span><span class="n">g</span><span class="p">]</span>
                <span class="n">maxlen</span> <span class="o">=</span> <span class="nb">max</span><span class="p">([</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">vals</span><span class="p">])</span>
                <span class="k">for</span> <span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">dc</span><span class="p">,</span> <span class="n">fm</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">vals</span><span class="p">):</span>
                    <span class="k">if</span> <span class="n">terse</span><span class="p">:</span>
                        <span class="n">o</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;{:</span><span class="si">{length}</span><span class="s2">} = </span><span class="si">{}</span><span class="s2"> # </span><span class="si">{}</span><span class="s2"> </span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="n">maxlen</span><span class="p">))</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">o</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;{:</span><span class="si">{length}</span><span class="s2">} = </span><span class="si">{}</span><span class="s2"> # </span><span class="si">{}</span><span class="s2"> </span><span class="si">{}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">dc</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="n">maxlen</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">maxlen</span> <span class="o">=</span> <span class="nb">max</span><span class="p">([</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">indict</span><span class="o">.</span><span class="n">keys</span><span class="p">()])</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">outfile</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">o</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">indict</span><span class="o">.</span><span class="n">items</span><span class="p">()):</span>
                <span class="n">o</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;{:</span><span class="si">{pal}</span><span class="s2">} = </span><span class="si">{:}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">fortParse</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">val</span><span class="p">)),</span> <span class="n">pal</span><span class="o">=</span><span class="n">maxlen</span><span class="p">))</span></div>


<span class="c1"># def </span>
</pre></div>

          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>