<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>flashy.IOutils</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <h1>Source code for flashy.IOutils</h1><div class="highlight"><pre>
<span></span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">shutil</span>
<span class="kn">import</span> <span class="nn">h5py</span>
<span class="kn">import</span> <span class="nn">collections</span> <span class="k">as</span> <span class="nn">cl</span>
<span class="kn">from</span> <span class="nn">flashy.utils</span> <span class="k">import</span> <span class="n">np</span>
<span class="kn">from</span> <span class="nn">subprocess</span> <span class="k">import</span> <span class="n">PIPE</span><span class="p">,</span> <span class="n">Popen</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="k">import</span> <span class="n">Image</span>
<span class="kn">import</span> <span class="nn">imageio</span>
<span class="n">_cdxfolder</span> <span class="o">=</span> <span class="s2">&quot;cdx&quot;</span>
<span class="n">_otpfolder</span> <span class="o">=</span> <span class="s2">&quot;otp&quot;</span>
<span class="n">_FLASH_DIR</span> <span class="o">=</span> <span class="s2">&quot;/lustre/atlas/proj-shared/csc198/frivas/00.code/FLASHOR&quot;</span>
<span class="n">_AUX_DIR</span> <span class="o">=</span> <span class="s2">&quot;/lustre/atlas/proj-shared/csc198/frivas/&quot;</span>


<div class="viewcode-block" id="turn2cartesian"><a class="viewcode-back" href="../../flashy.xhtml#flashy.IOutils.turn2cartesian">[docs]</a><span class="k">def</span> <span class="nf">turn2cartesian</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="s1">&#39;all&#39;</span><span class="p">,</span> <span class="n">nowitness</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Iterates over files within a folder, switching the geometry of </span>
<span class="sd">    hdf5 files found to cartesian.</span>
<span class="sd">    </span>
<span class="sd">    Args:</span>
<span class="sd">        folder(str): folder path.</span>
<span class="sd">        prefix(str): filter string (defaults to all files in the folder).</span>
<span class="sd">        nowitness(bool): remove non-modified files.</span>
<span class="sd">    </span>
<span class="sd">    &quot;&quot;&quot;</span>
    
    <span class="k">if</span> <span class="n">prefix</span><span class="o">==</span><span class="s1">&#39;all&#39;</span><span class="p">:</span>
        <span class="n">finns</span> <span class="o">=</span> <span class="n">getFileList</span><span class="p">(</span><span class="n">folder</span><span class="p">)</span>
        <span class="n">finns</span> <span class="o">+=</span> <span class="n">getFileList</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="s1">&#39;chk&#39;</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">finns</span> <span class="o">=</span> <span class="n">getFileList</span><span class="p">(</span><span class="n">folder</span><span class="p">)</span>
    <span class="n">finns</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">finns</span> <span class="k">if</span> <span class="s2">&quot;cart_&quot;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">finn</span> <span class="ow">in</span> <span class="n">finns</span><span class="p">:</span>
        <span class="n">jake</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span><span class="s1">&#39;cart_&#39;</span><span class="o">+</span><span class="n">finn</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">jake</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">{}</span><span class="s2"> found. Skipping.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">jake</span><span class="p">))</span>
            <span class="k">continue</span>
        <span class="n">switchGeometry</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span><span class="n">finn</span><span class="p">),</span> <span class="n">jake</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">nowitness</span><span class="p">:</span>
            <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span><span class="n">finn</span><span class="p">))</span></div>


<div class="viewcode-block" id="switchGeometry"><a class="viewcode-back" href="../../flashy.xhtml#flashy.IOutils.switchGeometry">[docs]</a><span class="k">def</span> <span class="nf">switchGeometry</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">output</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="kc">True</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;copies hdf5 file, changing the coordinate system name to </span>
<span class="sd">    cartesian for yt input.</span>
<span class="sd">    </span>
<span class="sd">    Args:</span>
<span class="sd">        file(str): input filename.</span>
<span class="sd">        output(str): output filename.</span>
<span class="sd">        verbose(bool): Report file creation.</span>
<span class="sd">    </span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">finn</span> <span class="o">=</span> <span class="n">h5py</span><span class="o">.</span><span class="n">File</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">)</span>
    <span class="n">jake</span> <span class="o">=</span> <span class="n">h5py</span><span class="o">.</span><span class="n">File</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span>
    <span class="c1"># p2 &gt; p3: obj.iterkeys() &gt; obj.keys()</span>
    <span class="c1"># p2 &gt; p3: hdf5 works with bytes, not str: u&quot;&quot; &gt; b&quot;&quot;</span>
    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">finn</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
        <span class="n">finn</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">jake</span><span class="p">)</span>
    <span class="n">ds</span> <span class="o">=</span> <span class="n">jake</span><span class="p">[</span><span class="sa">u</span><span class="s1">&#39;string scalars&#39;</span><span class="p">]</span>
    <span class="n">newt</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">ds</span><span class="p">[</span><span class="o">...</span><span class="p">])</span>
    <span class="n">newt</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">ds</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sa">b</span><span class="s2">&quot;cylindrical&quot;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&quot;cartesian  &quot;</span><span class="p">)</span>
    <span class="n">ds</span><span class="p">[</span><span class="o">...</span><span class="p">]</span> <span class="o">=</span> <span class="n">newt</span>
    <span class="n">ds2</span> <span class="o">=</span> <span class="n">jake</span><span class="p">[</span><span class="sa">u</span><span class="s1">&#39;string runtime parameters&#39;</span><span class="p">]</span>
    <span class="n">newt2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">ds2</span><span class="p">[</span><span class="o">...</span><span class="p">])</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">ds2</span><span class="p">):</span>
        <span class="k">if</span> <span class="sa">b</span><span class="s2">&quot;cylindrical&quot;</span> <span class="ow">in</span> <span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
            <span class="n">newt2</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sa">b</span><span class="s2">&quot;cylindrical&quot;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&quot;cartesian  &quot;</span><span class="p">)</span>
    <span class="n">ds2</span><span class="p">[</span><span class="o">...</span><span class="p">]</span> <span class="o">=</span> <span class="n">newt2</span>
    <span class="n">finn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
    <span class="n">jake</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">verbose</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Wrote </span><span class="si">{}</span><span class="s2"> from </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">file</span><span class="p">))</span></div>


<div class="viewcode-block" id="setupFLASH"><a class="viewcode-back" href="../../flashy.xhtml#flashy.IOutils.setupFLASH">[docs]</a><span class="k">def</span> <span class="nf">setupFLASH</span><span class="p">(</span><span class="n">module</span><span class="p">,</span> <span class="n">runfolder</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">kwargs</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;threadBlockList&#39;</span><span class="p">:</span><span class="s1">&#39;true&#39;</span><span class="p">},</span> <span class="n">nbs</span><span class="o">=</span><span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">16</span><span class="p">],</span>
               <span class="n">geometry</span><span class="o">=</span><span class="s1">&#39;cylindrical&#39;</span><span class="p">,</span> <span class="n">maxbl</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;calls ./setup at _FLASH_DIR with given parameters,</span>
<span class="sd">    writing the code to runfolder. (FLASH setup script runs only on py 2.X).</span>

<span class="sd">    Arguments:</span>
<span class="sd">        module(str): name of Simulation folder to setup.</span>
<span class="sd">        runfolder(str): run folder (creates _cdx, and _otp within it).</span>
<span class="sd">        kwargs(dict): keyword arguments to setup</span>
<span class="sd">        nbs(int tuple): cells per block for setup per dimension.</span>
<span class="sd">        geometry(str): cartesian, spherical, cylindrical(default).</span>
<span class="sd">        maxbl(int): maximum blocks per proc. elem.</span>
<span class="sd">        debug(bool): show terminal output.</span>

<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">runfolder</span><span class="p">:</span>
        <span class="n">net</span> <span class="o">=</span> <span class="s1">&#39;ap13&#39;</span>
        <span class="k">if</span> <span class="s1">&#39;xnet&#39;</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">kwargs</span><span class="p">[</span><span class="s1">&#39;xnet&#39;</span><span class="p">]</span><span class="o">==</span><span class="kc">True</span><span class="p">:</span>
                <span class="n">net</span> <span class="o">=</span> <span class="n">kwargs</span><span class="p">[</span><span class="s1">&#39;xnetData&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">dnum</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span><span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span><span class="s1">&#39;three&#39;</span><span class="p">}[</span><span class="nb">len</span><span class="p">(</span><span class="n">nbs</span><span class="p">)]</span>
        <span class="n">cells</span> <span class="o">=</span> <span class="s1">&#39;x&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">nbs</span><span class="p">])</span>
        <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="si">{}</span><span class="s1">.</span><span class="si">{}</span><span class="s1">.</span><span class="si">{}</span><span class="s1">cells.</span><span class="si">{}</span><span class="s1">maxb&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">net</span><span class="p">,</span> <span class="n">geometry</span><span class="p">,</span> <span class="n">cells</span><span class="p">,</span> <span class="n">maxbl</span><span class="p">)</span>
        <span class="c1"># TODO: remove/patch relative paths</span>
        <span class="n">relpath</span> <span class="o">=</span> <span class="s1">&#39;fruns.</span><span class="si">{}</span><span class="s1">/</span><span class="si">{}</span><span class="s1">/</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">dnum</span><span class="p">,</span> <span class="n">module</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
        <span class="n">runfolder</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">_AUX_DIR</span><span class="p">,</span> <span class="n">relpath</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">runfolder</span>
    <span class="n">destination</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">runfolder</span><span class="p">,</span> <span class="n">_cdxfolder</span><span class="p">)</span>
    <span class="n">path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">destination</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">destination</span><span class="p">):</span>
        <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">destination</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Emptying </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">destination</span><span class="p">))</span>
        <span class="n">shutil</span><span class="o">.</span><span class="n">rmtree</span><span class="p">(</span><span class="n">destination</span><span class="p">)</span>
        <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">destination</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">runfolder</span><span class="p">,</span> <span class="n">_otpfolder</span><span class="p">))</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>
    
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">nbs</span><span class="p">)</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
        <span class="n">dimstr</span> <span class="o">=</span> <span class="s2">&quot;-1d -nxb=</span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">*</span><span class="n">nbs</span><span class="p">)</span>
    <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">nbs</span><span class="p">)</span><span class="o">==</span><span class="mi">2</span><span class="p">:</span>
        <span class="n">dimstr</span> <span class="o">=</span> <span class="s2">&quot;-2d -nxb=</span><span class="si">{}</span><span class="s2"> -nyb=</span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">*</span><span class="n">nbs</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">dimstr</span> <span class="o">=</span> <span class="s2">&quot;-3d -nxb=</span><span class="si">{}</span><span class="s2"> -nyb=</span><span class="si">{}</span><span class="s2"> -nzb=</span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">*</span><span class="n">nbs</span><span class="p">)</span>
    
    <span class="n">cstub</span> <span class="o">=</span> <span class="s1">&#39;python2 </span><span class="si">{}</span><span class="s1">/bin/setup.py </span><span class="si">{}</span><span class="s1"> -auto &#39;</span>\
            <span class="s1">&#39;-objdir=&quot;</span><span class="si">{}</span><span class="s1">&quot; </span><span class="si">{}</span><span class="s1"> -geometry=</span><span class="si">{}</span><span class="s1"> -maxblocks=</span><span class="si">{}</span><span class="s1"> &#39;</span>
    <span class="n">comm</span> <span class="o">=</span> <span class="n">cstub</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">_FLASH_DIR</span><span class="p">,</span> <span class="n">module</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span>
                        <span class="n">dimstr</span><span class="p">,</span> <span class="n">geometry</span><span class="p">,</span> <span class="n">maxbl</span><span class="p">)</span>
    <span class="n">kwstr</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">v</span><span class="o">==</span><span class="s1">&#39;&#39;</span><span class="p">:</span>
            <span class="n">kwstr</span><span class="o">+=</span><span class="s1">&#39; </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">kwstr</span><span class="o">+=</span><span class="s1">&#39; </span><span class="si">{}</span><span class="s1">=</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">)</span>
    <span class="c1">#kwstr = &#39; &#39;.join([&#39;{}={}&#39;.format(k,v) for (k, v) in kwargs.items()])</span>
    <span class="n">comm</span> <span class="o">=</span> <span class="n">comm</span> <span class="o">+</span> <span class="n">kwstr</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">comm</span><span class="p">)</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">Popen</span><span class="p">([</span><span class="s1">&#39;/bin/bash&#39;</span><span class="p">],</span> <span class="n">stdin</span><span class="o">=</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">PIPE</span><span class="p">)</span>
    <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">communicate</span><span class="p">(</span><span class="nb">input</span><span class="o">=</span><span class="n">comm</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">exitcode</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">returncode</span>
    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">out</span><span class="o">.</span><span class="n">decode</span><span class="p">())</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;generated run name </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
    
    <span class="c1"># copy parameter varying script</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">iterpath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">_AUX_DIR</span><span class="p">,</span> <span class="s1">&#39;07.miscellaneous/bash/iterator&#39;</span><span class="p">)</span>
        <span class="n">shutil</span><span class="o">.</span><span class="n">copy2</span><span class="p">(</span><span class="n">iterpath</span><span class="p">,</span> <span class="n">destination</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;copied iterator&#39;</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;bash iterator not found, skipping.&#39;</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">comm</span><span class="p">,</span> <span class="n">exitcode</span></div>


<div class="viewcode-block" id="getFileList"><a class="viewcode-back" href="../../flashy.xhtml#flashy.IOutils.getFileList">[docs]</a><span class="k">def</span> <span class="nf">getFileList</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="s1">&#39;plt&#39;</span><span class="p">,</span> <span class="n">fullpath</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Returns a filename list subject to a prefix &#39;glob&#39;.</span>
<span class="sd">    </span>
<span class="sd">    Args:</span>
<span class="sd">        folder(str): look-in path.</span>
<span class="sd">        prefix(str): filter string for files</span>
<span class="sd">        fullpath(bool): return absolute path for each file.</span>
<span class="sd">        </span>
<span class="sd">    Returns:</span>
<span class="sd">        (str list)</span>
<span class="sd">    </span>
<span class="sd">    </span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">names</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">folder</span><span class="p">))</span>
    <span class="n">fnames</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">names</span> <span class="k">if</span> <span class="n">prefix</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">fullpath</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">folder</span><span class="p">),</span> <span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fnames</span><span class="p">]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">fnames</span></div>


<div class="viewcode-block" id="cpFLASHrun"><a class="viewcode-back" href="../../flashy.xhtml#flashy.IOutils.cpFLASHrun">[docs]</a><span class="k">def</span> <span class="nf">cpFLASHrun</span><span class="p">(</span><span class="n">runfolder</span><span class="p">,</span> <span class="n">newrunfol</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;copy the cdx folder to a new runfolder&quot;&quot;&quot;</span>
    <span class="n">src</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">runfolder</span><span class="p">),</span> <span class="n">_cdxfolder</span><span class="p">)</span>
    <span class="n">dst</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">newrunfol</span><span class="p">),</span> <span class="n">_cdxfolder</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">dst</span><span class="p">):</span>
        <span class="n">shutil</span><span class="o">.</span><span class="n">rmtree</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span>
        <span class="n">shutil</span><span class="o">.</span><span class="n">copytree</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">dst</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">shutil</span><span class="o">.</span><span class="n">copytree</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">dst</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">newrunfol</span><span class="p">,</span> <span class="n">_otpfolder</span><span class="p">))</span></div>


<div class="viewcode-block" id="makeGIF"><a class="viewcode-back" href="../../flashy.xhtml#flashy.IOutils.makeGIF">[docs]</a><span class="k">def</span> <span class="nf">makeGIF</span><span class="p">(</span><span class="n">runfolder</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">subf</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">speed</span><span class="o">=</span><span class="mf">0.2</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Join all png images within a folder in an animated .gif</span>

<span class="sd">    Args:</span>
<span class="sd">        runfolder (str): folder path</span>
<span class="sd">        prefix (str): prefix for files</span>
<span class="sd">        subf (str): subfolder for files</span>
<span class="sd">        speed (float): seconds between frames</span>
<span class="sd">    </span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">subf</span><span class="p">:</span>
        <span class="n">prepath</span> <span class="o">=</span> <span class="n">runfolder</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">prepath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">runfolder</span><span class="p">,</span> <span class="s2">&quot;png&quot;</span><span class="p">,</span> <span class="n">subf</span><span class="p">)</span>
    <span class="n">finns</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">([</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">prepath</span><span class="p">)</span> <span class="k">if</span> <span class="n">prefix</span> <span class="ow">in</span> <span class="n">i</span><span class="p">])</span>
    <span class="n">finns</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">finns</span> <span class="k">if</span> <span class="s1">&#39;.png&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">prefix</span><span class="p">:</span>
        <span class="n">prefix</span> <span class="o">=</span> <span class="n">subf</span>
    <span class="c1"># image resize</span>
    <span class="c1">#    for finn in finns:</span>
    <span class="c1">#        name, ext = os.path.splitext(finn)</span>
    <span class="c1">#        im = Image.open(finn)</span>
    <span class="c1">#        im.thumbnail(size)</span>
    <span class="c1">#        im.save(name + &quot;.resized.png&quot;, &quot;png&quot;)</span>
    <span class="n">jakes</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">finn</span> <span class="ow">in</span> <span class="n">finns</span><span class="p">:</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">finn</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span><span class="p">)</span>
        <span class="n">jakes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">imageio</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">prepath</span><span class="p">,</span><span class="n">finn</span><span class="p">)))</span>
    <span class="k">if</span> <span class="n">prefix</span><span class="p">:</span>
        <span class="n">expname</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">{}</span><span class="s2">/</span><span class="si">{}</span><span class="s2">.gif&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">runfolder</span><span class="p">,</span> <span class="n">prefix</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">expname</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">{}</span><span class="s2">/joined.gif&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">runfolder</span><span class="p">,</span> <span class="n">prefix</span><span class="p">)</span>
    <span class="n">imageio</span><span class="o">.</span><span class="n">mimsave</span><span class="p">(</span><span class="n">expname</span><span class="p">,</span> <span class="n">jakes</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="s1">&#39;gif&#39;</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="n">speed</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n\t</span><span class="s2">Saved: </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">expname</span><span class="p">))</span></div>


<span class="c1"># def fortParse(arg, dec=True):</span>
<span class="c1">#     &quot;&quot;&quot;returns a parsed variable from a parameter (bool,</span>
<span class="c1">#     str, or number)</span>

<span class="c1">#     Args:</span>
<span class="c1">#         arg(str): parameter value.</span>
<span class="c1">#         dec(bool): add &quot;&quot; to strings for printing.</span>

<span class="c1">#     Returns:</span>
<span class="c1">#         str: decorated argument for fortran parsing.</span>

<span class="c1">#     &quot;&quot;&quot;</span>
<span class="c1">#     booleans = [&#39;.true.&#39;, &#39;.false.&#39;, &#39;false&#39;, &#39;true&#39; ]</span>
<span class="c1">#     try:</span>
<span class="c1">#         val = np.float(arg.replace(&#39;d&#39;,&#39;E&#39;))</span>
<span class="c1">#         return arg</span>
<span class="c1">#     except ValueError:</span>
<span class="c1">#         if arg.strip().lower() in booleans:</span>
<span class="c1">#             return arg.strip()</span>
<span class="c1">#         else:</span>
<span class="c1">#             if dec:</span>
<span class="c1">#                 return &#39;&quot;{}&quot;&#39;.format(arg.strip(&#39;&quot;\&#39; &#39;))</span>
<span class="c1">#             else:</span>
<span class="c1">#                 return arg.strip(&#39;&quot;\&#39; &#39;)</span>


<div class="viewcode-block" id="fortParse"><a class="viewcode-back" href="../../flashy.xhtml#flashy.IOutils.fortParse">[docs]</a><span class="k">def</span> <span class="nf">fortParse</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="n">dec</span><span class="o">=</span><span class="kc">True</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;returns a parsed variable from a parameter (bool,</span>
<span class="sd">    str, or number)</span>

<span class="sd">    Args:</span>
<span class="sd">        arg(str): parameter value.</span>
<span class="sd">        dec(bool): add &quot;&quot; to strings for printing.</span>

<span class="sd">    Returns:</span>
<span class="sd">        str: decorated argument for fortran parsing.</span>

<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">booleans</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;false&#39;</span><span class="p">,</span> <span class="s1">&#39;true&#39;</span><span class="p">]</span>
    <span class="n">query</span> <span class="o">=</span> <span class="n">arg</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;.&quot;</span><span class="se">\&#39;</span><span class="s1"> &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">val</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">float</span><span class="p">(</span><span class="n">query</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">,</span><span class="s1">&#39;E&#39;</span><span class="p">))</span>
        <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">val</span><span class="p">)</span><span class="o">==</span><span class="n">val</span><span class="p">:</span>
            <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="s1">&#39;</span><span class="si">{:+1.10E}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">query</span> <span class="ow">in</span> <span class="n">booleans</span><span class="p">:</span>
            <span class="k">return</span> <span class="s1">&#39;.</span><span class="si">{}</span><span class="s1">.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">dec</span><span class="p">:</span>
                <span class="k">return</span> <span class="s1">&#39;&quot;</span><span class="si">{}</span><span class="s1">&quot;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">arg</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;&quot;</span><span class="se">\&#39;</span><span class="s1"> &#39;</span><span class="p">))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">arg</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;&quot;</span><span class="se">\&#39;</span><span class="s1"> &#39;</span><span class="p">)</span></div>


<div class="viewcode-block" id="execute"><a class="viewcode-back" href="../../flashy.xhtml#flashy.IOutils.execute">[docs]</a><span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">outpath</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;qsubs the sumbit.pbs at outpath</span>

<span class="sd">    Args:</span>
<span class="sd">        outpath (str): runfolder</span>

<span class="sd">    Returns:</span>
<span class="sd">        (tuple): STDOUT, STDERR, ERRCODE</span>

<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">command</span> <span class="o">=</span> <span class="s1">&#39;qsub submit.pbs&#39;</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">Popen</span><span class="p">(</span><span class="n">command</span><span class="o">.</span><span class="n">split</span><span class="p">(),</span> <span class="n">cwd</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">outpath</span><span class="p">),</span>
              <span class="n">stdin</span><span class="o">=</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">PIPE</span><span class="p">)</span>
    <span class="n">r</span><span class="p">,</span> <span class="n">e</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
    <span class="n">exitcode</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">returncode</span>
    <span class="k">return</span> <span class="n">r</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">exitcode</span></div>


<div class="viewcode-block" id="cpList"><a class="viewcode-back" href="../../flashy.xhtml#flashy.IOutils.cpList">[docs]</a><span class="k">def</span> <span class="nf">cpList</span><span class="p">(</span><span class="n">files</span><span class="p">,</span> <span class="n">src</span><span class="p">,</span> <span class="n">dst</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Copies a file list between folders.</span>
<span class="sd">    </span>
<span class="sd">    Args:</span>
<span class="sd">        files(str list): list of filenames.</span>
<span class="sd">        src(str): source folder.</span>
<span class="sd">        dst(str): destination folder.</span>
<span class="sd">    </span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
        <span class="n">shutil</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">src</span><span class="p">,</span><span class="n">f</span><span class="p">]),</span> <span class="s1">&#39;/&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">dst</span><span class="p">,</span><span class="n">f</span><span class="p">]))</span></div>


<div class="viewcode-block" id="writePBSscript"><a class="viewcode-back" href="../../flashy.xhtml#flashy.IOutils.writePBSscript">[docs]</a><span class="k">def</span> <span class="nf">writePBSscript</span><span class="p">(</span><span class="n">subfile</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="n">pbsins</span><span class="o">=</span><span class="p">[],</span>
                   <span class="n">time</span><span class="o">=</span><span class="s1">&#39;12:00:00&#39;</span><span class="p">,</span> <span class="n">nodes</span><span class="o">=</span><span class="mi">1252</span><span class="p">,</span> <span class="n">ompth</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span> <span class="n">proj</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">mail</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">abe</span><span class="o">=</span><span class="s1">&#39;abe&#39;</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;PBS submit system file cooker.</span>
<span class="sd">    builds a submit.pbs with a typical header, specifying walltime and nodes,</span>
<span class="sd">    then adding slines of code below. Exports OMP_NUM_THREADS=ompth</span>
<span class="sd">    titan: aprun (-j1) -n 1 -d 16</span>
<span class="sd">    debug: -D (int)</span>
<span class="sd">    rhea: mpirun --map-by ppr:N:node:pe=Th or -n</span>
<span class="sd">    debug: --display-map / --report-bindings</span>
<span class="sd">    Rhea max: 48 hours on 16 nodes (2x8 core p/node: -np 256)</span>
<span class="sd">    Titan: &lt;125 nodes 2h, &lt;312 nodes 6h...</span>
<span class="sd">    </span>
<span class="sd">    Args:</span>
<span class="sd">        subfile(str): submit filename (also set as jobname)</span>
<span class="sd">        code(str list): commands to insert in the file</span>
<span class="sd">        pbsins(str list): extra PBS directives.</span>
<span class="sd">        time(str): walltime request.</span>
<span class="sd">        nodes(int): nodes to request.</span>
<span class="sd">        ompth(int): omp thread number.</span>
<span class="sd">        proj(str): project code.</span>
<span class="sd">        mail(str): notification e-mail.</span>
<span class="sd">    </span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">subHeader</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">subHeader</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;#!/bin/bash&#39;</span><span class="p">)</span>
    <span class="n">subHeader</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;#PBS -V&#39;</span><span class="p">)</span>  <span class="c1"># pass env vars to nodes</span>
    <span class="n">subHeader</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;#PBS -l gres=atlas1&#39;</span><span class="p">)</span>
    <span class="n">subHeader</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;#PBS -A </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">proj</span><span class="p">))</span>
    <span class="n">subHeader</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;#PBS -l walltime=</span><span class="si">{}</span><span class="s1">,nodes=</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">nodes</span><span class="p">))</span>
    <span class="n">subHeader</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;#PBS -N </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">subfile</span><span class="p">)[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]))</span>
    <span class="n">subHeader</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;#PBS -j oe&#39;</span><span class="p">)</span>  <span class="c1"># join err and otp</span>
    <span class="n">subScript</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">subScript</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;echo Submitted from: $PBS_O_WORKDIR&#39;</span><span class="p">)</span>
    <span class="n">subScript</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;date&#39;</span><span class="p">)</span>
    <span class="n">subScript</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;export OMP_NUM_THREADS=</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">ompth</span><span class="p">)))</span>
    <span class="n">subScript</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;export CRAY_CUDA_MPS=1&#39;</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">mail</span><span class="p">:</span>
        <span class="n">subHeader</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;#PBS -M </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">mail</span><span class="p">))</span>
        <span class="n">subHeader</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;#PBS -m </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">abe</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">pbsins</span><span class="p">:</span>
        <span class="n">subHeader</span> <span class="o">=</span> <span class="n">subHeader</span> <span class="o">+</span> <span class="n">pbsins</span>
    <span class="n">subScript</span> <span class="o">=</span> <span class="n">subScript</span> <span class="o">+</span> <span class="n">code</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">subfile</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">o</span><span class="p">:</span>
        <span class="n">o</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">subHeader</span><span class="p">))</span>
        <span class="n">o</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
        <span class="n">o</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">subScript</span><span class="p">))</span>
        <span class="n">o</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span></div>


<div class="viewcode-block" id="getTITANtime"><a class="viewcode-back" href="../../flashy.xhtml#flashy.IOutils.getTITANtime">[docs]</a><span class="k">def</span> <span class="nf">getTITANtime</span><span class="p">(</span><span class="n">nodes</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">nodes</span><span class="o">&lt;</span><span class="mi">125</span><span class="p">:</span>
        <span class="k">return</span> <span class="s1">&#39;02:00:00&#39;</span>
    <span class="k">elif</span> <span class="n">nodes</span><span class="o">&lt;</span><span class="mi">312</span><span class="p">:</span>
        <span class="k">return</span> <span class="s1">&#39;06:00:00&#39;</span>
    <span class="k">elif</span> <span class="n">nodes</span><span class="o">&lt;</span><span class="mi">3749</span><span class="p">:</span>
        <span class="k">return</span> <span class="s1">&#39;12:00:00&#39;</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="s1">&#39;24:00:00&#39;</span></div>


<div class="viewcode-block" id="probeFile"><a class="viewcode-back" href="../../flashy.xhtml#flashy.IOutils.probeFile">[docs]</a><span class="k">def</span> <span class="nf">probeFile</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">showrows</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">onlyhead</span><span class="o">=</span><span class="kc">True</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Shows &#39;showrows&#39; lines from the start, midfile and</span>
<span class="sd">    ending of a plaintext file</span>
<span class="sd">    </span>
<span class="sd">    Args:</span>
<span class="sd">        file(str): file path.</span>
<span class="sd">        showrows(int): rows to show from each section.</span>
<span class="sd">        onlyhead(bool): only print the top of the file (equivalent to </span>
<span class="sd">            head -n showrows file).</span>
<span class="sd">    </span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
    <span class="n">l</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">lines</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">l2</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">l</span><span class="o">/</span><span class="mf">2.</span><span class="p">)</span>
        <span class="n">pNumbered</span><span class="p">(</span><span class="n">lines</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">showrows</span><span class="p">],</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">onlyhead</span><span class="p">:</span>
            <span class="n">pNumbered</span><span class="p">(</span><span class="n">lines</span><span class="p">[</span><span class="n">l2</span><span class="p">:</span><span class="n">l2</span><span class="o">+</span><span class="n">showrows</span><span class="p">],</span> <span class="n">l2</span><span class="p">)</span>
            <span class="n">pNumbered</span><span class="p">(</span><span class="n">lines</span><span class="p">[</span><span class="o">-</span><span class="n">showrows</span><span class="p">:],</span> <span class="n">l</span><span class="o">-</span><span class="n">showrows</span><span class="p">)</span></div>


<div class="viewcode-block" id="pNumbered"><a class="viewcode-back" href="../../flashy.xhtml#flashy.IOutils.pNumbered">[docs]</a><span class="k">def</span> <span class="nf">pNumbered</span><span class="p">(</span><span class="n">rlist</span><span class="p">,</span> <span class="n">offset</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;prints numbered lines from a list.</span>
<span class="sd">    </span>
<span class="sd">    Args:</span>
<span class="sd">        rlist(str list): lines to print</span>
<span class="sd">        offset(int): first line number.</span>
<span class="sd">    </span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">rlist</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{}</span><span class="s1">: </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">offset</span><span class="p">,</span> <span class="n">l</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)))</span></div>


<div class="viewcode-block" id="emptyFileTree"><a class="viewcode-back" href="../../flashy.xhtml#flashy.IOutils.emptyFileTree">[docs]</a><span class="k">def</span> <span class="nf">emptyFileTree</span><span class="p">(</span><span class="n">stemfolder</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Empties stemfolder.&quot;&quot;&quot;</span>
    <span class="n">path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
    <span class="n">shutil</span><span class="o">.</span><span class="n">rmtree</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">path</span><span class="p">)</span></div>
    
</pre></div>

          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>